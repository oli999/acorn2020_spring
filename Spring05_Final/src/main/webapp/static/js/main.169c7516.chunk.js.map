{"version":3,"sources":["App10_Ajax6.js","serviceWorker.js","index.js"],"names":["App10_Ajax6","useState","id","pwd","loginId","formData","setFormData","changed","e","name","target","value","onSubmit","preventDefault","fetch","method","headers","body","qs","stringify","then","res","json","data","console","log","isSuccess","alert","catch","err","onChange","type","placeholder","JSON","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4MAkFeA,EA9EG,WAAK,IAAD,EAEYC,mBAAS,CACnCC,GAAG,GACHC,IAAI,GACJC,QAAQ,OALM,mBAEXC,EAFW,KAEDC,EAFC,KAQZC,EAAQ,SAACC,GAEX,IAAIC,EAAKD,EAAEE,OAAOD,KAEdE,EAAMH,EAAEE,OAAOC,MACnBL,EAAY,eACLD,EADI,eAENI,EAAME,MA6Cf,OACI,6BACMN,EAASD,SACP,2BAAG,gCAASC,EAASD,SAArB,sCAEJ,6EACA,0BAAMQ,SA/CD,SAACJ,GAEVA,EAAEK,iBACFC,MAAM,qDAAsD,CACxDC,OAAO,OACPC,QAAQ,CAAC,eAAe,qCACxBC,KAAMC,IAAGC,UAAUd,KAEtBe,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACTA,EAAKG,UACJpB,EAAY,eACLD,EADI,CAEPD,QAAQmB,EAAKrB,MAGjByB,MAAM,yFAGbC,OAAM,SAAAC,GACHL,QAAQC,IAAII,QA2BR,2BAAOC,SAAUvB,EAASE,KAAK,KAAKsB,KAAK,OAAOC,YAAY,0BAC5D,2BAAOF,SAAUvB,EAASE,KAAK,MAAMsB,KAAK,WAAWC,YAAY,gCACjE,4BAAQD,KAAK,UAAb,uBAEJ,2BAAIE,KAAKd,UAAUd,IACnB,2BAAIa,IAAGC,UAAUd,IACjB,4BAAQ6B,QA5BH,WAETpB,MAAM,uDACLM,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACCA,EAAKG,YACJpB,EAAY,eACLD,EADI,CAEPD,QAAQ,QAEZuB,MAAM,mEAkBV,8BCjEQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.169c7516.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n// >yarn add query-string 해서 설치후에 사용할수 있다. \r\nimport qs from 'query-string';\r\n\r\nconst App10_Ajax6=()=>{\r\n\r\n    const [formData, setFormData]=useState({\r\n        id:'', \r\n        pwd:'',\r\n        loginId:null\r\n    });\r\n\r\n    const changed=(e)=>{\r\n        //이벤트가 일어난 input 요소의 name 속성의 값 ( id or pwd ) 읽어오기 \r\n        let name=e.target.name;\r\n        //이벤트가 일어난 input 요소에 입력한 value 값\r\n        let value=e.target.value;\r\n        setFormData({\r\n            ...formData,\r\n            [name]:value\r\n        });\r\n    };\r\n\r\n    const submit=(e)=>{\r\n        //폼 전송 막기 \r\n        e.preventDefault();\r\n        fetch(\"http://localhost:8888/spring05/users/ajax_login.do\", {\r\n            method:\"POST\",\r\n            headers:{\"Content-Type\":\"application/x-www-form-urlencoded\"},\r\n            body: qs.stringify(formData)\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data);\r\n            if(data.isSuccess){\r\n                setFormData({\r\n                    ...formData,\r\n                    loginId:data.id\r\n                });\r\n            }else{\r\n                alert(\"아이디 혹은 비밀번호가 틀려요!\");\r\n            }        \r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        });\r\n\r\n    };\r\n\r\n    const logout=()=>{\r\n        //ajax 로 로그아웃 요청을 한다.\r\n        fetch(\"http://localhost:8888/spring05/users/ajax_logout.do\")\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            if(data.isSuccess){\r\n                setFormData({\r\n                    ...formData,\r\n                    loginId:null\r\n                });\r\n                alert(\"로그 아웃 되었습니다.\");\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            { formData.loginId && \r\n                <p><strong>{formData.loginId}</strong>님 로그인중...</p>\r\n            }\r\n            <h1>로그인 폼 입니다.</h1>\r\n            <form onSubmit={submit}>\r\n                <input onChange={changed} name=\"id\" type=\"text\" placeholder=\"아이디...\"/>\r\n                <input onChange={changed} name=\"pwd\" type=\"password\" placeholder=\"비밀번호...\"/>\r\n                <button type=\"submit\">로그인</button>\r\n            </form>\r\n            <p>{JSON.stringify(formData)}</p>\r\n            <p>{qs.stringify(formData)}</p>\r\n            <button onClick={logout}>로그아웃</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App10_Ajax6;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App10_Ajax6';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}